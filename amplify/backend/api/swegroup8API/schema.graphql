# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type DansInventory @model
    @auth(rules: [{ allow: groups, groups: ["Admins"] },
                  { allow: private, operations: [read] },
                  { allow: private, provider: iam, operations: [read] },
                  { allow: public, provider: iam, operations: [read] }]

) {
    id: ID!
    name: String!
    color: String!
    price: Float!
    fabric: String!
    type: String!
    image: String

    file: S3Object
} #CreateDansInventory

type DiscountCode @model
    @auth(rules: [{ allow: groups, groups: ["Admins"] },
                  { allow: private, operations: [read] },
                  { allow: private, provider: iam, operations: [read] },
                  { allow: public, provider: iam, operations: [read] }]

) {
    id: ID!
    description: String!
    code: String!
    discountDecimal: Float!
} #CreateDiscountCodes


type Order @model
    @auth(rules: [{ allow: groups, groups: ["Admins"] },
        { allow: private, operations: [read] },
        { allow: private, provider: iam, operations: [read] },
        { allow: public, provider: iam, operations: [read] }]
)
#@key(name: "byUser", fields: ["user"])
{
    id: ID!
    user: String!
    date: String
    total: Float
    #    dans: [DansOrder] @connection(keyName: "byOrder", fields: ["id"])
} #CreateOrder


type DansOrder @model
#@key(name: "byDans", fields: ["dans_id", "order_id"])
#@key(name: "byOrder", fields: ["order_id", "dans_id"])
    @auth(rules: [{ allow: groups, groups: ["Admins"] },
        { allow: private, operations: [read] },
        { allow: private, provider: iam, operations: [read] },
        { allow: public, provider: iam, operations: [read] }]
)
{
    id: ID!
    order_id: ID!
    dans_id: ID!
    #    dans: DansInventory @connection(fields: ["dans_id"])
    #    order: Order @connection(fields: ["order_id"])
} #CreateDansOrderTable


type Mutation {
    processOrder(input: ProcessOrderInput!): OrderStatus
    # @function(name: "processPayment-${env}")
    # @function(name: "createOrder-${env}")
}

enum OrderStatus {
    SUCCESS
    FAILED
}

input ProcessOrderInput{
    id: ID!
    cart: [CartItem]
    total: Float!
    token: String!
    address: String
}

input CartItem{
    id: ID!
    title: String
    image: String
    price: Float
    amount: Int
}


type S3Object {
    bucket: String!
    region: String!
    key: String!
} #UsedForImagesInS31
